name: Frontend and Infrastructure CI-CD

env:
  package_name: terraform-gitops
  
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-infrastructure:
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      # Install Terraform CLI
      - name: Configure Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      # Check formatting
      - name: Terraform format
        run: terraform fmt -check -recursive

      # Initialize Terraform
      - name: Terraform init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Terraform plan 
        if: github.event_name == 'pull_request' 
        run: terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Terraform apply
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        run: terraform apply --auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      
  
      - name: Setup semver bash
        run: |
          sudo curl https://raw.githubusercontent.com/fsaintjacques/semver-tool/3.0.0/src/semver -o /usr/local/bin/semver && sudo chmod +x /usr/local/bin/semver
          semver --version
      
      - name: Get version
        id: get-version
        run: |
          git fetch --tags
          package_name=${{ env.package_name }}
          last_version=$(git tag --sort=-version:refname | grep -P "^$package_name@v\d+\.\d+\.\d+$" | head -n 1 | cut -d v -f 2)
          branch_name=$(echo ${{ github.ref_name }} | awk '{print tolower($0)}')

          if [ -z "$last_version" ]; then
            new_version="1.0.0"
          elif [[ "$branch_name" =~ ^major ]]; then
            new_version=$(semver bump major "$last_version")
          elif [[ "$branch_name" =~ ^feat ]]; then
            new_version=$(semver bump minor "$last_version")
          else
            new_version=$(semver bump patch "$last_version")
          fi
          echo "new_version=$new_version" >> $GITHUB_ENV


      - name: Prepare artifact
        run: |
          BUILD_NUM=$(echo $GITHUB_RUN_NUMBER)
          BUILD_ID=$(echo $GITHUB_SHA | head -c7)
    
          # Assuming you want to check if this run is a result of a merged pull request
          # Pass the condition from GitHub context to the shell script
          PR_MERGED=${{ github.event.pull_request.merged == 'true' }}
    
          if [[ "$PR_MERGED" == "true" ]]; then
            VERSION="${{ env.package_name }}@v${{ env.new_version }}"
          else
            VERSION="${{ env.package_name }}@v${{ env.new_version }}+build.${BUILD_NUM}.${BUILD_ID}"
          fi
    
          ARTIFACT_NAME="${VERSION}.zip"
          zip -r ${ARTIFACT_NAME} *.tf
          mv ${ARTIFACT_NAME} dist.zip
          ls -al
          echo "version=${VERSION}" >> $GITHUB_ENV
          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_ENV

      
